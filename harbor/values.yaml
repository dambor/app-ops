## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

## String to partially override common.names.fullname template (will maintain the release name)
##
nameOverride:

## String to fully override common.names.fullname template
##
fullnameOverride:

## Service parameters
##
service:
  ## K8s service type
  ## Allowed values are "ClusterIP", "NodePort" or "LoadBalancer"
  ##
  type: ClusterIP
  ## TLS parameters
  ##
  tls:
    ## Enable TLS for external access
    ## Note: When type is "Ingress" and TLS is disabled, the port must be included
    ## in the command when pulling/pushing images.
    ## ref: https://github.com/goharbor/harbor/issues/5291
    ##
    enabled: true
    ## Existing secret name containing your own TLS certificates.
    ## The secret contains keys named:
    ## "tls.crt" - the certificate (required)
    ## "tls.key" - the private key (required)
    ## "ca.crt" - the certificate of CA (optional)
    ## Self-signed TLS certificates will be used otherwise.
    ##
    existingSecret: ""
    ## By default, the Notary service will use the same certificate described above.
    ## Fill the name of secret if you want to use a separated on for Notary.
    ##
    notaryExistingSecret: ""
    ## The common name used to automatically generate the certificates.
    ## Mandatory when "secretName" is not provided or type is not "Ingress".
    ##
    commonName: "harbor.apps.gdambor.com"
  ## Service parameters when type is "clusterIP"
  ##
  ports:
    ## The service port Harbor listens on when serving with HTTP
    ##
    http: 80
    ## The service port Harbor listens on when serving with HTTPS
    ##
    https: 443
    ## The service port Notary listens on. Only needed when notary.enabled
    ## is set to true
    ##
    notary: 4443
  ## Service parameters when type is "nodePort"
  ##
  nodePorts:
    http:
    https:
    notary:
  loadBalancerIP:
  annotations: {}
  loadBalancerSourceRanges: []
  externalTrafficPolicy:

## Ingress parameters
##
ingress:
  enabled: true
  ## The list of hostnames to be covered with this ingress record
  ##
  hosts:
    core: harbor.apps.gdambor.com
    notary: notary.apps.gdambor.com
  ## Set to the type of ingress controller if it has specific requirements.
  ## leave as `default` for most ingress controllers.
  ## set to `gce` if using the GCE ingress controller
  ## set to `ncp` if using the NCP (NSX-T Container Plugin) ingress controller
  ##
  controller: default
  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    ingress.kubernetes.io/force-ssl-redirect: "true"
    kubernetes.io/ingress.class: contour
    kubernetes.io/tls-acme: "true"

## The external URL for Harbor core service. It is used to
## 1) populate the docker/helm commands showed on portal
## 2) populate the token service URL returned to docker/notary client
##
## Format: protocol://domain[:port]. Usually:
## 1) if "service.type" is "ingress", the "domain" should be
## the value of "ingress.hosts.core"
## 2) if "service.type" is "clusterIP", the "domain" should be
## the value of "service.clusterIP.name"
## 3) if "service.type" is "nodePort", the "domain" should be
## the IP address of k8s node. If Harbor is deployed behind the proxy,
## set it as the URL of proxy
##
externalURL: https://harbor.apps.gdambor.com

## The persistence is enabled by default and a default StorageClass
## is needed in the k8s cluster to provision volumes dynamicly.
## Specify another StorageClass in the "storageClass" or set "existingClaim"
## if you have already existing persistent volumes to use
##
## For storing images and charts, you can also use "azure", "gcs", "s3",
## "swift" or "oss". Set it in the "imageChartStorage" section
##
persistence:
  enabled: true
  ## Resource Policy
  ## Setting it to "keep" to avoid removing PVCs during a helm delete operation
  ##
  resourcePolicy: "keep"
  persistentVolumeClaim:
    registry:
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      ##
      existingClaim: ""
      ## Specify the "storageClass" used to provision the volume.
      ## Set it to "-" to disable dynamic provisioning
      ##
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    jobservice:
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      ##
      existingClaim: ""
      ## Specify the "storageClass" used to provision the volume.
      ## Set it to "-" to disable dynamic provisioning
      ##
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi
    chartmuseum:
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      ##
      existingClaim: ""
      ## Specify the "storageClass" used to provision the volume.
      ## Set it to "-" to disable dynamic provisioning
      ##
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    trivy:
      storageClass: ""
      accessMode: ReadWriteOnce
      size: 5Gi

  ## Define which storage backend is used for registry and chartmuseum to store
  ## images and charts.
  ## ref: https://github.com/docker/distribution/blob/master/docs/configuration.md#storage
  ##
  imageChartStorage:
    ## Name of a secret contaning the CA bundle
    ##
    caBundleSecretName:
    ## Specify whether to disable `redirect` for images and chart storage, for
    ## backends which not supported it (such as using minio for `s3` storage type), please disable
    ## it. To disable redirects, simply set `disableredirect` to `true` instead.
    ## ref: https://github.com/docker/distribution/blob/master/docs/configuration.md#redirect
    ##
    disableredirect: false
    ## Specify the type of storage. Allowed values are [ filesystem | azure | gcs | s3 | swift | oss ]
    ##
    type: filesystem
    ## Images/charts storage parameters when type is "filesystem"
    ##
    filesystem:
      rootdirectory: /storage
      maxthreads:
    ## Images/charts storage parameters when type is "azure"
    ##
    azure:
      accountname: accountname
      accountkey: base64encodedaccountkey
      container: containername
      storagePrefix: /azure/harbor/charts
      ## Example realm
      # realm: windows.net
      realm:
    ## Images/charts storage parameters when type is "gcs"
    ##
    gcs:
      bucket: bucketname
      ## The base64 encoded json file which contains the gcs key (file's content)
      ##
      encodedkey: base64-encoded-json-key-file
      rootdirectory:
      chunksize:
    ## Images/charts storage parameters when type is "s3"
    ##
    s3:
      region: us-west-1
      bucket: bucketname
      accesskey:
      secretkey:
      regionendpoint:
      encrypt:
      keyid:
      secure:
      v4auth:
      chunksize:
      rootdirectory:
      storageclass:
      sse:
    ## Images/charts storage parameters when type is "swift"
    ##
    swift:
      authurl: https://storage.myprovider.com/v3/auth
      username:
      password:
      container:
      region:
      tenant:
      tenantid:
      domain:
      domainid:
      trustid:
      insecureskipverify:
      chunksize:
      prefix:
      secretkey:
      accesskey:
      authversion:
      endpointtype:
      tempurlcontainerkey:
      tempurlmethods:
    ## Images/charts storage parameters when type is "oss"
    ##
    oss:
      accesskeyid:
      accesskeysecret:
      region:
      bucket:
      endpoint:
      internal:
      encrypt:
      secure:
      chunksize:
      rootdirectory:
      secretkey:

## The log level used for Harbor services. Allowed values are [ fatal | error | warn | info | debug | trace ]
##
logLevel: debug

## Option to force users to specify passwords (core.secret, harborAdminPassword, and secretKey). That is required for 'helm upgrade' to work properly.
## If it is not forced, random values will be generated.
##
forcePassword: false

## The initial password of Harbor admin. Change it from portal after launching Harbor
##
harborAdminPassword: '$piderM@n1'

## If expose the service via Ingress, the NGINX server will not be used
##

## The proxy settings for updating clair vulnerabilities from the Internet and replicating
## artifacts from/to the registries that cannot be reached directly
##
proxy:
  httpProxy: ""
  httpsProxy: ""
  noProxy: 127.0.0.1,localhost,.local,.internal
  components:
    - core
    - jobservice
    - clair

## Common annotations to add to all Harbor resources (sub-charts are not considered). Evaluated as a template
##
commonAnnotations: {}

## Common labels to add to all Harbor resources (sub-charts are not considered). Evaluated as a template
##
commonLabels: {}

## Array with extra yaml to deploy with the chart. Evaluated as a template
##
extraDeploy: []

### Modified params

notary:
  enabled: false
clair:
  enabled: false

