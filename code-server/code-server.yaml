---
apiVersion: v1
kind: Namespace
metadata:
  name:  code-server
---
apiVersion: v1
kind: Service
metadata:
 name: code-server
spec:
 ports:
 - port: 8080
   targetPort: 8080
 selector:
   app: code-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: code-server
  name: code-server
spec:
  selector:
    matchLabels:
      app: code-server
  replicas: 1
  template:
    metadata:
      labels:
        app: code-server
    spec:
      initContainers:
      # This container clones the desired git repo to the pvc volume.
      - name: git-clone
        image: jasonmorgan/code-server # Any image with git will do
        command:
          - bash
        args:
          - /home/coder/prep.sh # Run the prep script from our configmap
        volumeMounts:
          - name: code-server-pv-claim
            mountPath: /home/coder/
          - name: prep-script
            mountPath: /home/coder/prep.sh
            subPath: prep.sh
        env:
        - name: REPO
          value: https://github.com/jasonmorgan/tbs-getting-started.git
      containers:
      - image: jasonmorgan/code-server
        imagePullPolicy: Always
        name: code-server
        args: ["/home/coder/projects/"]
        env:
        - name: PASSWORD
          value: "E26kXkAC9V5g2vK%!p68ErUTbR@YY75TV4Tp"
        - name: PORT
          value: "8080"
        volumeMounts:
        - name: code-server-pv-claim
          mountPath: /home/coder/
      volumes:
      - name: code-server-pv-claim
        persistentVolumeClaim:
          claimName: code-server-pv-claim
      - name: prep-script
        configMap:
          name: prep-script
          defaultMode: 0744
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: code-server-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prep-script
data:
  prep.sh: |
    #!/bin/bash
    sudo chown -R coder:coder /home/coder/
    mkdir projects
    cd /home/coder/projects/
    git clone $REPO || true
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: code-server
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod # Use the name of your production certificate issuer
    ingress.kubernetes.io/force-ssl-redirect: "true" # Force contour to make all connections https
    kubernetes.io/ingress.class: contour
    kubernetes.io/tls-acme: "true"
spec:
  tls: 
  - secretName: code-server-tls
    hosts:
    - code-server.apps.gdambor.com
  rules:
  - host: code-server.apps.gdambor.com
    http:
      paths:
      - backend:
          serviceName: code-server
          servicePort: 8080
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: code-serverproxy
  namespace: code-server
spec:
  routes:
  - enableWebsockets: true
    services:
    - name: code-server
      port: 8080
  virtualhost:
    fqdn: code-server.apps.gdambor.com
    tls:
      secretName: code-server-tls